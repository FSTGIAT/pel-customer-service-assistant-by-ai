<script setup>
import { ref, onMounted } from 'vue'
import { chatService } from '@/services/api'

// State
const messages = ref([])
const input = ref('')
const isLoading = ref(false)
const customerInfo = ref(null)
const sessionTime = ref('0:00')
const error = ref(null)
const customerId = '1234' // This would normally come from your auth/routing system

// Initialize chat session
const initializeChat = async () => {
  try {
    isLoading.value = true
    
    // Load customer info
    customerInfo.value = await chatService.getCustomerInfo(customerId)
    
    // Add welcome message
    messages.value = [
      {
        type: 'system',
        content: 'Connected to billing support AI assistant'
      },
      {
        type: 'bot',
        content: `Hello! I'm reviewing the billing information for ${customerInfo.value.name}. How can I help you today?`
      }
    ]
  } catch (err) {
    error.value = 'Failed to initialize chat. Please refresh the page.'
    console.error('Initialization error:', err)
  } finally {
    isLoading.value = false
  }
}

// Send message to API
const sendMessage = async () => {
  if (!input.value.trim() || isLoading.value) return
  
  const messageText = input.value
  input.value = '' // Clear input immediately for better UX
  
  // Add user message immediately
  messages.value.push({
    type: 'user',
    content: messageText
  })

  try {
    isLoading.value = true
    
    // Send message to API
    const response = await chatService.sendMessage(
      messageText,
      customerId,
      messages.value.slice(-5) // Send last 5 messages for context
    )
    
    // Add bot response
    messages.value.push({
      type: 'bot',
      content: response.response
    })
  } catch (err) {
    messages.value.push({
      type: 'system',
      content: 'Sorry, I encountered an error. Please try again.'
    })
    console.error('Message error:', err)
  } finally {
    isLoading.value = false
  }
}

// Session timer
const startSessionTimer = () => {
  let seconds = 0
  setInterval(() => {
    seconds++
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    sessionTime.value = `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }, 1000)
}

// Initialize on mount
onMounted(() => {
  initializeChat()
  startSessionTimer()
})
</script>

<template>
  <div class="flex h-screen bg-gray-100">
    <!-- Left Panel - PDF Viewer -->
    <div class="w-1/2 p-4 bg-white border-r border-gray-200">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-xl font-semibold">Customer Bill</h2>
        <div class="flex items-center space-x-2">
          <i class="fas fa-search w-5 h-5 text-gray-500"></i>
          <span class="text-sm text-gray-500">Search Document</span>
        </div>
      </div>
      <div class="bg-gray-100 h-full rounded-lg flex items-center justify-center">
        <i class="fas fa-file-text w-16 h-16 text-gray-400"></i>
        <p class="text-gray-500 ml-2">PDF Viewer Area</p>
      </div>
    </div>

    <!-- Right Panel - Chat Interface -->
    <div class="w-1/2 flex flex-col">
      <!-- Customer Info Header -->
      <div class="bg-white p-4 border-b border-gray-200">
        <div class="flex items-center justify-between">
          <div>
            <h2 class="text-lg font-semibold">
              Customer #{{ customerInfo?.id || customerId }}
            </h2>
            <p class="text-sm text-gray-500">
              {{ customerInfo?.name || 'Loading...' }} â€¢ 
              {{ customerInfo?.plan || 'Standard Plan' }}
            </p>
          </div>
          <div class="flex items-center space-x-2 text-sm text-gray-500">
            <i class="fas fa-clock w-4 h-4"></i>
            <span>Session: {{ sessionTime }}</span>
          </div>
        </div>
      </div>

      <!-- Error Message -->
      <div v-if="error" class="bg-red-50 p-4 border-b border-red-100">
        <p class="text-red-600 text-sm">{{ error }}</p>
      </div>

      <!-- Chat Messages -->
      <div class="flex-1 overflow-y-auto p-4 space-y-4">
        <div v-for="(message, index) in messages" 
             :key="index" 
             :class="['flex', message.type === 'user' ? 'justify-end' : 'justify-start']">
          <div :class="['flex items-start space-x-2 max-w-[80%]',
                       message.type === 'system' ? 'justify-center w-full' : '']">
            <div v-if="message.type === 'bot'" 
                 class="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center">
              <i class="fas fa-robot w-5 h-5 text-blue-600"></i>
            </div>
            <div :class="['p-3 rounded-lg',
                         message.type === 'user' ? 'bg-blue-600 text-white' :
                         message.type === 'bot' ? 'bg-gray-100 text-gray-800' :
                         'bg-gray-100 text-gray-500 text-sm w-full text-center']">
              {{ message.content }}
            </div>
            <div v-if="message.type === 'user'" 
                 class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
              <i class="fas fa-user w-5 h-5 text-gray-600"></i>
            </div>
          </div>
        </div>

        <!-- Loading Indicator -->
        <div v-if="isLoading" class="flex justify-center">
          <div class="animate-pulse text-gray-400">
            AI is thinking...
          </div>
        </div>
      </div>

      <!-- Input Area -->
      <div class="p-4 bg-white border-t border-gray-200">
        <div class="flex items-center space-x-2">
          <input
            v-model="input"
            type="text"
            placeholder="Type your message..."
            class="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500"
            @keyup.enter="sendMessage"
            :disabled="isLoading"
          />
          <button
            @click="sendMessage"
            class="p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none disabled:opacity-50"
            :disabled="isLoading || !input.trim()"
          >
            <i class="fas fa-paper-plane w-5 h-5"></i>
          </button>
        </div>
      </div>
    </div>
  </div>
</template>
